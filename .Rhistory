install.packages("data.table")
library(data.table)
testfilepath <- "./Data/UCI HAR Dataset/test/doslineas.txt"
setwd("/home/dcruz/Coursera/GettingCleaning/Project/")
X_test <- X_test <- read.csv(testfilepath)#, sep=" ", header=FALSE, na.strings = "", fill = TRUE)
testfilepath <- "./Data/UCI HAR Dataset/doslineas.txt"
X_test <- X_test <- read.csv(testfilepath)#, sep=" ", header=FALSE, na.strings = "", fill = TRUE)
X_test
tables()
length(X_test)
testfilepath <- "./Data/UCI HAR Dataset/doslineas.txt"
X_test <- X_test <- read.csv(testfilepath)#, sep=" ", header=FALSE, na.strings = "", fill = TRUE)
X_test <- X_test <- read.table(testfilepath)#, sep=" ", header=FALSE, na.strings = "", fill = TRUE)
testfilepath <- "./Data/UCI HAR Dataset/test/X_test.txt"
X_test <- X_test <- read.table(testfilepath)#, sep=" ", header=FALSE, na.strings = "", fill = TRUE)
summary(X_test)
head(X_test)
is.na(X_test)
testfilepath <- "./Data/UCI HAR Dataset/train/X_test.txt"
X_train <- read.table(testfilepath)
testfilepath <- "./Data/UCI HAR Dataset/train/X_train.txt"
X_train <- read.table(testfilepath)
X <- rbind(X_test, X_train)
X_test <- data.frame()
X_train <- data.frame()
?remove
remove(X_test, X_train)
filepath <- "./Data/UCI HAR Dataset/features.txt"
features <- scan(filepath)
features <- read.table(filepath)
colnames(X) <- features
head(X, n=1)
features$V2
colnames(X) <- features$V2
head(X, n=1)
filepath <- "./Data/UCI HAR Dataset/test/subject_test.txt"
subject <- read.table(filepath)
filepath <- "./Data/UCI HAR Dataset/test/X_test.txt"
X_test <- X_test <- read.table(filepath)
X_test <- cbind(subject, X_test)
filepath <- "./Data/UCI HAR Dataset/train/X_train.txt"
X_train <- read.table(filepath)
filepath <- "./Data/UCI HAR Dataset/train/subject_train.txt"
subject <- read.table(filepath)
X <- rbind(X_test, X_train)
X_train <- cbind(subject, X_train)
X <- rbind(X_test, X_train)
remove(X_test, X_train)
remove(X_test, X_train, subject)
colnames(X) <- c("Subject", features$V2)
head(X, n=1)
features <- as.vector(read.table(filepath))
colnames(X) <- c("Subject", features$V2)
head(X, n=1)
features <- as.list(read.table(filepath))
colnames(X) <- c("Subject", features$V2)
head(X, n=1)
class(features$V2)
features$V2
features <- read.table(filepath)
class(features$V2)
features
filepath <- "./Data/UCI HAR Dataset/features.txt"
features <- read.table(filepath)
features
class(features$V2)
colnames(X) <- c(as.factor("Subject"), features$V2)
head(X, n=1)
colnames(X) <- c("Subject", as.vector(features$V2))
head(X, n=1)
X[1:5, 1:5]
names(C)
names(X)
"mean" %in% names(X)
"%mean%" %in% names(X)
".mean." %in% names(X)
?select
??select
class(names(X))
grepl(names(X), "mean()")
sapply(names(X), grepl, "mean()")
sapply(names(X), grepl("mean()"))
sapply(names(X), grepl(x, "mean()"))
sapply(names(X), function(x) grepl(x, "mean()"))
sapply(names(X), function(x) grepl("mean()", x))
sapply(names(X), function(x) grepl("mean\(\)", x))
sapply(names(X), function(x) grep("mean()", x))
sapply(names(X), function(x) grepl("mean\(\)", x))
sapply(names(X), function(x) grepl("mean()", x))
?greapl
?grepl
sapply(names(X), function(x) grepl("mean()", x, fixed = TRUE))
mean <- sapply(names(X), function(x) grepl("mean()", x, fixed = TRUE))
class(mean)
?mean
remove(mean)
theMean <- sapply(names(X), function(x) grepl("mean()", x, fixed = TRUE))
X[theMean]
X[theMean, 1:#]
}
X[theMean, 1:3]
X[1:3, theMean]
theSD <- sapply(names(X), function(x) grepl("sd()", x, fixed = TRUE))
names(theSD)
names(X[theSD])
X[theSD]
X[theSD,]
X[,theSD]
theSD
theSD <- sapply(names(X), function(x) grepl("std()", x, fixed = TRUE))
names(X[theSD])
head(X, n=1)
XMean <- X[theMean]
MeanSD <- X[theSD]
XSD <- X[theSD]
remove(MeanSD)
names(XMean)
names(XSD)
DescriptiveNames <- c("MeanTimeBodyAcceleration-X", "MeanTimeBodyAcceleration-Y", "MeanTimeBoddyAcceleration-Z",
"MeanTimeGravityAcceleration-X", "MeanTimeGravityAcceleration-Y", "MeanTimeGravityAcceleration-Z",
"MeanTimeBodyJerkAcceleration-X", "MeanTimeBodyJerkAcceleration-Y", "MeanTimeBodyJerkAcceleration-Z",
"MeanTimeBodyAngularVelocity-X", "MeanTimeBodyAngularVelocity-Y", "MeanTimeBodyAngularVelocity-Z",
"MeanTimeBodyJerkAngularVelocity-X", "MeanTimeBodyJerkAngularVelocity-Y", "MeanTimeBodyJerkAngularVelocity-Z",
"MeanMagnitudeBodyAcceleration", "MeanMagnitudeGravityAcceleration", "MeanMagnitudeBodyJerkAcceleration",
"MeanMagnitudeBodyAngularVelocity", "MeanMagnitudeBodyJerkAngularVelocity", "MeanFourierBodyAcceleration-X",
"MeanFourierBodyAcceleration-Y", "MeanFourierBodyAcceleration-Z", "MeanFourierBodyJerkAcceleration-X",
"MeanFourierBodyJerkAcceleration-Y", "MeanFourierBodyJerkAcceleration-Z", "MeanFourierBodyAngularVelocity-X",
"MeanFourierBodyAngularVelocity-Y", "MeanFourierBodyAngularVelocity-Z", "MeanFourierMagnitudeBodyAcceleration",
"MeanFourierMagnitudeBodyBodyAccelerationJerk", "MeanFourierMagnitudeBodyBodyAngularVelocity", "MeanFourierMagnitudeBodyBodyAngularVelocityJerk")
?regexp
DescriptiveNames <- c("MeanTimeBodyAcceleration-X", "MeanTimeBodyAcceleration-Y", "MeanTimeBoddyAcceleration-Z",
"MeanTimeGravityAcceleration-X", "MeanTimeGravityAcceleration-Y", "MeanTimeGravityAcceleration-Z",
"MeanTimeBodyJerkAcceleration-X", "MeanTimeBodyJerkAcceleration-Y", "MeanTimeBodyJerkAcceleration-Z",
"MeanTimeBodyAngularVelocity-X", "MeanTimeBodyAngularVelocity-Y", "MeanTimeBodyAngularVelocity-Z",
"MeanTimeBodyJerkAngularVelocity-X", "MeanTimeBodyJerkAngularVelocity-Y", "MeanTimeBodyJerkAngularVelocity-Z",
"MeanMagnitudeBodyAcceleration", "MeanMagnitudeGravityAcceleration", "MeanMagnitudeBodyJerkAcceleration",
"MeanMagnitudeBodyAngularVelocity", "MeanMagnitudeBodyJerkAngularVelocity", "MeanFourierBodyAcceleration-X",
"MeanFourierBodyAcceleration-Y", "MeanFourierBodyAcceleration-Z", "MeanFourierBodyJerkAcceleration-X",
"MeanFourierBodyJerkAcceleration-Y", "MeanFourierBodyJerkAcceleration-Z", "MeanFourierBodyAngularVelocity-X",
"MeanFourierBodyAngularVelocity-Y", "MeanFourierBodyAngularVelocity-Z", "MeanFourierMagnitudeBodyAcceleration",
"MeanFourierMagnitudeBodyBodyAccelerationJerk", "MeanFourierMagnitudeBodyBodyAngularVelocity", "MeanFourierMagnitudeBodyBodyAngularVelocityJerk",
"SDTimeBodyAcceleration-X", "SDTimeBodyAcceleration-Y", "SDTimeBoddyAcceleration-Z",
"SDTimeGravityAcceleration-X", "SDTimeGravityAcceleration-Y", "SDTimeGravityAcceleration-Z",
"SDTimeBodyJerkAcceleration-X", "SDTimeBodyJerkAcceleration-Y", "SDTimeBodyJerkAcceleration-Z",
"SDTimeBodyAngularVelocity-X", "SDTimeBodyAngularVelocity-Y", "SDTimeBodyAngularVelocity-Z",
"SDTimeBodyJerkAngularVelocity-X", "SDTimeBodyJerkAngularVelocity-Y", "SDTimeBodyJerkAngularVelocity-Z",
"SDMagnitudeBodyAcceleration", "SDMagnitudeGravityAcceleration", "SDMagnitudeBodyJerkAcceleration",
"SDMagnitudeBodyAngularVelocity", "SDMagnitudeBodyJerkAngularVelocity", "SDFourierBodyAcceleration-X",
"SDFourierBodyAcceleration-Y", "SDFourierBodyAcceleration-Z", "SDFourierBodyJerkAcceleration-X",
"SDFourierBodyJerkAcceleration-Y", "SDFourierBodyJerkAcceleration-Z", "SDFourierBodyAngularVelocity-X",
"SDFourierBodyAngularVelocity-Y", "SDFourierBodyAngularVelocity-Z", "SDFourierMagnitudeBodyAcceleration",
"SDFourierMagnitudeBodyBodyAccelerationJerk", "SDFourierMagnitudeBodyBodyAngularVelocity", "SDFourierMagnitudeBodyBodyAngularVelocityJerk")
almostTidy <- cbind(XMean, XSD)
remove(XMean, XSD)
names(almostTidy) <- DescriptiveNames
names(almostTidy)
filepath <- "./Data/UCI HAR Dataset/test/subject_test.txt"
subject_test <- read.table(filepath)
filepath <- "./Data/UCI HAR Dataset/train/subject_train.txt"
subject_train <- read.table(filepath)
subject <- rbind(subject_test, subject_train)
almostTidy <- cbind(subject, almostTidy)
head(almostTidy)
names(almostTidy) <- c("Subject", names(almostTidy))
names(almostTidy) <- c("Subject", DescriptiveNames)
factors(almostTidy$Subject)
factor(almostTidy$Subject)
install.packages("reshape2")
install.packages("reshape2")
library(reshape2)
?melt
meltData <- melt(almostTidy, id="Subject")
meltData
head(meltData, n=3)
length(meltData)
tail(meltData, n=3)
tidyData <- dcast(meltData, Subject ~ variable, mean)
head(tidyData)
?write.table
write.table(tidyData, file="TidyData.txt", sep="\t", col.names = TRUE)
write.table(tidyData, file="TidyData.txt", sep="\t", col.names = TRUE, row.names=FALSE)
